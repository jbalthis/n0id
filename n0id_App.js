
// Project: n0id
// Model: message
// ==========================================================================

n0id.message = M.Model.create({
	__name__: 'payload',

 	message: M.Model.attr('String',{
		isRequired:YES
	}),
	
	key: M.Model.attr('String',{
		isRequired:YES
	}),
	
	timestamp: M.Model.attr('String',{
		isRequired:YES
	})
		 
}, M.DataProviderLocalStorage);


/*----------------------------------------------------------------------------
 /
 /	                     n0id - v0.1
 /
 /	JavaScript-1.5 Implementation of the 
 /					   256 bit RC4 Stream Cypher (Encryption Algorithm)  
 /						by: jg9lt
 /						11/07/2013	
 /
 /---------------------------------------------------------------------------*/

		//	Constructor Method for the RC4 Object
function RC4(k,m)
	{	
		// Flush all of our properties then begin to
		//	Setup those up that hold the user input
		//
		//		k ==> Keyphrase(Password)
		//		m ==> Plain-Text/Cipher-Text Message to be encrypted/decrypted
		//		
		// Also Defines our two initial arrays that
		//	Get Generated by the Class
		// 
		// 	s ==> State Box
		// 	e ==> Error Tracking		
		//		
		//	A returned value of -1 from one of our properties,
		//	is an internal error flag
		
		this.sbox,this.key,this.msg = null;
		var s			 =			 new Array(256);
		this.sbox	 =			 new Array(256);
		this.key	 	 = (k)  ? new String(k)  : -1;			
		this.msg 	 = (m)  ? new String(m)  : -1;
		this.sbox[0] = (s)  ? 0 : -1;	
		
		// Return Our New Object
		return this;
			
	}

// *TODO* Finish Error Handling
function Err(message,func,line)
	{
		this.message = message;
   	this.func = func;
   	this.line = line;
   	
   	alert(this.message); 
   }		

RC4.prototype = {
    
		constructor:RC4,
	
		// Just as the name implies, this method does some basic error checks
		// on the data that was sent to us. It also reformats the key and msg 
		// into arrays rather than strings for easier data handling in the 
		// alogorithms. Checks each character in both key and msg to be sure 
		// that they are within the first 256 characters in the ASCII Standard.
				
		validate :
		
			function() {
				
				// Check for Internal Error Code Assignment
				this.key	= (this.key == -1) ? -1 : this.key;
				this.msg = (this.msg == -1) ? -1 : this.msg;
								
				// Format the Key and Msg into arrays
				function toArray(arg)
					{
						var arr = [];
						for(var i = 0; i < arg.length; i++)
    					arr.push(arg.charAt(i));
						return arr;
					}
			   this.key = toArray(this.key);				
				this.msg = toArray(this.msg);
				
				// Verify that Our Input is Within the Range of Ascii
				// That We are Going to Be Working With
				function asciiChk(arg)
					{
						for(var i = 0; i < arg.length; i++) { 						
							
							if(arg[i].charCodeAt(0) < 256) {
								arg[i] = arg[i].charCodeAt(0);
							}
							else{
								new Err("Input Out Of Range - Try Again");
								break;
							}			
						}
					
						return arg;
					}				

				this.key = asciiChk(this.key);
				this.msg = asciiChk(this.msg);
				
				return this;
			},
		
		// Method to Initialize our State Box and Permutate it based on the Key		
		
		initialize :
			
			function() {

				var i = 0; var j = 0; var t = 0;				
						
				// Fill the 256 Values From 0-255 Into the State Box to populate it
				var count = 0;	
				while(count < 256){
					this.sbox[count] = count;		
								
					count++;				
				}
				
				
				while(i < 256) {
					
					// The First Algorithm That Handles the Key Scheduling Begins Here. 					
					// It uses the Values of the key and the iterations of the loop to 
					// Transform the State Box into a permutation Array
					j = (j + (this.sbox[i] + this.key[(i % this.key.length)])) % 256;
				
					// This Operation swapa the value of s[i] for s[j]
					t = this.sbox[i];
					this.sbox[i] = this.sbox[j];
					this.sbox[j] = t;
						
					i++
				}
			
				return this;
											
			},
		

		// The Method to Generate a Psuedo-Random KeyStream Using the Key Values
    	// to Make Calls on the permuted sbox Array.
		
		Keystream :
    	
    		function() {
				
				this.kst = new Array();
				    			
   			var i = 0; var j = 0; var t = 0;
			
    			
    			// The Algorithm to Produce the Psuedo-Random KeyStream
				var count = 0;
    			while(count < this.msg.length)
    				{
    					i = ((i + 1) % 256);
    					j = ((j + this.sbox[i]) % 256);
    		
    								  t = this.sbox[i];
    					this.sbox[i] =	this.sbox[j];
						this.sbox[j] = t;    			
    			
   					// Fill the KeyStream Array with our Random Values
    					this.kst[count] = this.sbox[(this.sbox[i] + this.sbox[j]) % 256]; 					
						count++;					
					}	
				
				return this;
    		},
    		
    	// The Method to Perform the Encrypting/Decrypting
		
		Crypt :
			
			function() {
					
				this.out = new Array();			
				var str = new String();	
				
				var count = 0;
				while(count < this.msg.length)
					{
						// Simply XOR our Message Text with the Generated Key-Stream to Encrypt/Decrypt 		
						this.out[count] = (this.msg[count] ^ this.kst[count]);
						
						// Build a String if Outputting to a Display						
						str += String.fromCharCode(this.out[count]);						
						
						count = count+1;
					}

				return str;
			}			
	}
// ==========================================================================
// The M-Project - Mobile HTML5 Application Framework
// Generated with: Espresso 
//
// Project: n0id
// Controller: n0idController
// ==========================================================================

m_require('app/controllers/RC4.js');

n0id.n0idController = M.Controller.extend({
	/*key: null,
	message: null,	
	toggle: 'encrypt', //default*/	
	
	init: function() {
		//$(document).ready(function(){
			//$(".iu-silder span").addClass(".ui-btn-active");
		//});
		alert("Don't forget to flip the switch to ENC if you are encrypting a message!");
	},
	
	setToggle: function() {
		var bool = M.ViewManager.getView('mainPage','toggle').getValue();
		
		//if(bool == "dec"){
			$(document).ready(function(){
				alert("hello");//M.ViewManager.getView('mainPage','toggle').setValue("enc");
			});
		//}
	}, 
				
	toggleCrypto: function() {
		var bool = M.ViewManager.getView('mainPage','toggle').getValue();
	},

	base64Encode: function() {
			/*			*/
	}, 
	
	base64Decode: function() {
			/*			*/
	}, 

	go: function() {
		
		var bool = M.ViewManager.getView('mainPage','toggle').getValue();
		var key = M.ViewManager.getView('mainPage','keyInputBox').getValue();	
		var msg = M.ViewManager.getView('mainPage','msgInputBox').getValue();		
		msg = (bool == "enc") ? msg : window.atob(msg);	
		
		var rc4 = new RC4(key,msg);
		var output = rc4.validate().initialize().Keystream().Crypt();

		output = (bool != "enc") ? output : window.btoa(output);
		M.ViewManager.getView('mainPage','msgInputBox').setValue(output);		
			
	},

	keyFocus: function() {
		
	},

	keyBlur: function() {
		
	},
	
	msgFocus: function() {
		
	},

	msgBlur: function() {
		
	},
	
	helpPopup: function() {
		this.switchToPage('helpPage', M.TRANSITION.FLIP);
	},
	
	contactPopup: function() {
		this.switchToPage('contactPage', M.TRANSITION.FLIP);
	},
	
	settingsPopup: function() {
		this.switchToPage('settingsPage', M.TRANSITION.FLIP);
	}

});

// Project: n0id
// View: mainPage
// ==========================================================================


n0id.mainPage = M.PageView.design({	
	
	events: {
		pageshow: {
			target: n0id.n0idController,
			action: 'init'
		}
	},
 
	cssClass: 'mainPage',

	childViews: 'header content footer',

	header: M.ToolbarView.design({
		anchorLocation: M.TOP,
		childViews: 'label logo toggle',
		
		label: M.LabelView.design({
			anchorLocation: M.LEFT,			
			value: 'n0id',
			cssClass: 'header-label'
		}),		
		
		logo: M.ImageView.design({
			anchorLocation: M.CENTER,			
			value: 'theme/images/faceless-1.jpg',
			cssClass: 'header-logo',
		
			/*events:{
				tap:{
					target: n0id.n0idController,
					action: 'helpPopup'
				}
			}*/
		
		}), //end n0idLogo

		toggle: M.ToggleSwitchView.design({
			anchorLocation: M.RIGHT,
			cssClass:'toggle',			
			isInline: NO,			
			isMini: NO,	
			
			label: 'Encrypt or Decrypt?',
			
			onLabel: 'ENC',
			onValue: 'enc',			
			offLabel: 'DEC',
			offValue: 'dec',
			
			//'toggleCrypto'
			events: {
				
				change: {
					target: n0id.n0idController,
					action: 'toggleCrypto'
				}
				
			}
		
		}) //end cryptoDirectionToggle

	}), //end header

	content: M.ScrollView.design({
		childViews: 'formContainer',		
			
		formContainer: M.ContainerView.design({			
			childViews: 'form',
				
			form: M.FormView.design({
				childViews: 'msgInputBoxContainer keyInputBoxContainer submitButtonContainer',
				showAlertDialogOnError: YES,		
			
				msgInputBoxContainer: M.ContainerView.design({
					childViews: 'msgInputBox',				
					cssClass: 'form-seperator msg-input-box-container',
					
					// The text area to both send and receive messages.
					msgInputBox: M.TextFieldView.design({
						label: 'Message',
						//cssClassOnInit: 'textInputInit ui-input-text',	
						cssClass: 'form-item',		
						hasMultipleLines: YES,			
					
						events:{
							focus:{
								target: n0id.n0idController,
								action: 'msgFocus'
							},
							blur:{
								target: n0id.n0idController,
								action: 'msgBlur'
							}
						}
				
					}) //end msgInputBox
				}),			
				
				keyInputBoxContainer: M.ContainerView.design({
					childViews: 'keyInputBox',				
					cssClass: 'form-seperator key-input-box-container',
					
					// The text area to receive the user's password.
					keyInputBox: M.TextFieldView.design({
						label: 'Keyphrase',
						inputType: 'password',				
						cssClass: 'form-item',
					
						events:{
							focus:{
								target: n0id.n0idController,
								action: 'keyFocus'
							},
							blur:{
								target: n0id.n0idController,
								action: 'keyBlur'
							}
						}
					}) //end keyInputBox
				}),
				
				// Defaults to encrypt unless the user has 
				// specified decrypt. In which case the n0idController
				// will change the 'value:Encryot to value:Decrypt' and
				// run the cipher to decrypt. A loading box will
				// appear on execution either way.	
				submitButtonContainer: M.ContainerView.design({			
					childViews: 'submitButton',				
					cssClass: 'form-seperator submit-button-container',
					
					submitButton: M.ButtonView.design({
						value: 'Go!',			
						cssClass: 'form-button',				
						events: {
							tap: {
											
									target: n0id.n0idController,	
									action: 'go'
														
							}
						}
					}) //end submitButton
				})
			
			})	//end form
	
		}) // end formContainer	
	
	}), //end content
	
	footer: M.ToolbarView.design({
		anchorLocation: M.BOTTOM,
		childViews: 'label',
		
		label: M.LabelView.design({
			anchorLocation: M.CENTER,			
			value: 'n0id',
			cssClass: 'footer-label'
		})
	})
	/*footer: M.GridView.design({
		childViews: 'label1 label2 label3',
		layout: {
			cssClass: 'container ui-footer ui-bar-a ui-footer-fixed slidedown',
			columns: {
				0: 'column1',
				1: 'column2',
				2: 'column3'
			}
		},
		label1: M.LabelView.design({
			cssClass: 'footerNav',
			value: 'Help',
			events: {
				tap: {
					target: n0id.n0idController,
					action: 'helpPopup'
				}			
			}			
			//hyperlinkType: M.HYPERLINK_WEBSITE,
			//hyperlinkTaget: '#'
		}),
		label2: M.LabelView.design({
			cssClass: 'footerNav',			
			value: 'Settings',
			events: {
				tap: {
					target: n0id.n0idController,
					action: 'settingsPopup'
				}			
			}			
			//hyperlinkType: M.HYPERLINK_WEBSITE,
			//hyperlinkTaget: '#'
		}),
		label3: M.LabelView.design({
			cssClass: 'footerNav',			
			value: 'Contact',
			events: {
				tap: {
					target: n0id.n0idController,
					action: 'contactPopup'
				}			
			}	
			//hyperlinkType: M.HYPERLINK_WEBSITE,
			//hyperlinkTaget: '#'
		})
	})//end footer*/

}); //end mainPage


n0id.Tabs = M.TabBarView.design({

    childViews: 'contactTab settingsTab helpTab',

    anchorLocation: M.BOTTOM,

    transition: M.TRANSITION.NONE,

    name: 'tabs',

    contactTab: M.TabBarItemView.design({

        value: 'Contact',
        page: 'contactPage',
        icon: 'contact',

    }),

    settingsTab: M.TabBarItemView.design({

        value: 'Settings',
        page: 'settingsPage',
        icon: 'settings'

    }),

    helpTab: M.TabBarItemView.design({

        value: 'Help',
        page: 'helpPage',
        icon: 'help',
        
    })

});

// Project: n0id
// View: contactPage
// ==========================================================================
m_require('app/views/tabs.js');

n0id.contactPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
    events: {
        pageshow: {
            target: n0id.MyController,
            action: 'init'
        }
    },
    
    cssClass: 'contactPage',

    childViews: 'header content tabs',

    header: M.ToolbarView.design({
        value: 'HEADER',
        anchorLocation: M.TOP
    }),

    content: M.ScrollView.design({
        childViews: 'label',
        label: M.LabelView.design({
            value: 'contactPage'
        })
    }),

    tabs: n0id.Tabs

});


// Project: n0id
// View: helpPage
// ==========================================================================
m_require('app/views/tabs.js');

n0id.contactPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
    events: {
        pageshow: {
            target: n0id.MyController,
            action: 'init'
        }
    },
    
    cssClass: 'helpPage',

    childViews: 'header content tabs',

    header: M.ToolbarView.design({
        value: 'HEADER',
        anchorLocation: M.TOP
    }),

    content: M.ScrollView.design({
        childViews: 'label',
        label: M.LabelView.design({
            value: 'contactPage'
        })
    }),

    tabs: n0id.Tabs

});
// Project: n0id
// View: settingsPage
// ==========================================================================
m_require('app/views/tabs.js');

n0id.contactPage = M.PageView.design({

    /* Use the 'events' property to bind events like 'pageshow' */
    events: {
        pageshow: {
            target: n0id.MyController,
            action: 'init'
        }
    },
    
    cssClass: 'settingsPage',

    childViews: 'header content tabs',

    header: M.ToolbarView.design({
        value: 'HEADER',
        anchorLocation: M.TOP
    }),

    content: M.ScrollView.design({
        childViews: 'label',
        label: M.LabelView.design({
            value: 'contactPage'
        })
    }),

    tabs: n0id.Tabs

});

// Project: n0id 
// ==========================================================================
var n0id = n0id || {};

n0id.app = M.Application.design({
 
	entryPage : 'mainPage',
	
	mainPage: n0id.mainPage,

	settingsPage: n0id.settingsPage,
	
	contactPage: n0id.contactPage,
	
	helpPage: n0id.helpPage
	
});
